{"version":3,"sources":["logic/outcomes.ts","components/snackbars/SnackbarWrapper.tsx","logic/board.ts","components/game/Tile.tsx","components/game/Board.tsx","logic/bot.ts","components/game/GameStats.tsx","components/snackbars/DefaultSnackbar.tsx","components/snackbars/Snackbars.tsx","components/game/Game.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["Outcomes","SnackbarTypes","otherPlayer","state","Circle","Cross","BoardState","playerTurn","tiles","done","winner","Neutral","width","heigth","totalTiles","this","getTotalTiles","okMoves","moves","forEach","v","i","push","makeMove","tile","newTiles","checkForGameOver","wonGame","full","length","rWin","rowWin","cWin","colWin","d1Win","dia1Win","dia2Win","lastRowStartTile","y","first","lastTile","steps","Array","fill","tileColors","Tile","onClick","className","Board","board","map","value","key","calculateBestMove","a","console","time","movesWithOutcomes","move","minMaxOutcome","currentBest","Infinity","bestMoves","outcome","log","randomIndex","Math","floor","random","timeEnd","best","potentialOutcome","GameStats","boardState","botDelayOn","switchBotDelay","Player","Switch","checked","onChange","event","target","DefaultSnackbar","message","Snackbar","type","SnackbarContext","React","createContext","openSnackbar","undefined","closedState","Default","open","SnackbarWrapper","children","useState","setState","millis","Promise","resolve","setTimeout","closeSnackbar","Provider","Game","startingNext","setStarting","setBoard","delayOn","setDelayOn","useContext","restart","useCallback","gameOver","botTurn","optimalMove","useEffect","delay","App","href","octoColor","bannerColor","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"gMAAYA,E,yHAAAA,O,iBAAAA,I,oBAAAA,I,sBAAAA,M,KAQL,I,ECLKC,EDKCC,EAAc,SAACC,GAAD,OAAsBA,IAAUH,EAASI,OAASJ,EAASK,MAAQL,EAASI,QEP1FE,EASX,WAAYC,EAAqBC,GAAqB,IAAD,gCARrDA,WAQqD,OAPrDD,gBAOqD,OANrDE,MAAO,EAM8C,KALrDC,OAAmBV,EAASW,QAKyB,KAJ5CC,MAAgB,EAI4B,KAH5CC,OAAiB,EAG2B,KAFpCC,WAAaC,KAAKH,MAAQG,KAAKF,OAEK,KAUrDG,cAAgB,kBAAM,EAAKF,YAV0B,KAYrDG,QAAU,WACR,IAAMC,EAAkB,GAMxB,OALA,EAAKV,MAAMW,SAAQ,SAACC,EAAGC,GACjBD,IAAMpB,EAASW,SACjBO,EAAMI,KAAKD,MAGRH,GAnB4C,KAsBrDK,SAAW,SAACC,GACV,IAAMC,EAAQ,YAAO,EAAKjB,OAE1B,OADAiB,EAASD,GAAQ,EAAKjB,WACf,IAAID,EAAW,EAAKJ,cAAeuB,IAzBS,KA4BrDvB,YAAc,kBAAMA,EAAY,EAAKK,aA5BgB,KA8B7CmB,iBAAmB,YACpB,EAAKhB,OAAS,EAAKiB,WACtB,EAAKlB,MAAO,EAEZ,EAAKA,KAAO,EAAKmB,QAlCgC,KAsC7CA,KAAO,kBAAgC,IAA1B,EAAKX,UAAUY,QAtCiB,KAwC7CF,QAAU,WAChB,IAAMG,EAAO,EAAKC,SAClB,GAAID,EAAM,OAAOA,EAEjB,IAAME,EAAO,EAAKC,SAClB,GAAID,EAAM,OAAOA,EAEjB,IAAME,EAAQ,EAAKC,UACnB,OAAID,GAEG,EAAKE,WAlDuC,KAuD7CL,OAAS,WAGf,IAFA,IACMM,EADa,EAAKrB,gBACc,EAAKJ,MAClC0B,EAAI,EAAGA,GAAKD,EAAkBC,GAAK,EAAK1B,MAAO,CACtD,IAAM2B,EAAQ,EAAK/B,MAAM8B,GACzB,GAAIC,IAAUvC,EAASW,QAEvB,IADA,IAAM6B,EAAWF,EAAI,EAAK1B,MAAQ,EACzBS,EAAI,EAAGA,GAAKmB,EAAUnB,IAAK,CAClC,IAAMG,EAAOc,EAAIjB,EACjB,GAAI,EAAKb,MAAMgB,KAAUe,EAAO,MAChC,GAAIf,IAASgB,EAAU,OAAOD,GAGlC,OAAOvC,EAASW,SApEmC,KAuE7CsB,OAAS,WAGf,IAFA,IAAMnB,EAAa,EAAKE,gBAEfsB,EAAI,EAAGA,EAAI,EAAK1B,MAAO0B,IAAK,CACnC,IAAMC,EAAQ,EAAK/B,MAAM8B,GACzB,GAAIC,IAAUvC,EAASW,QAGvB,IADA,IAAM6B,EAAW1B,EAAa,EAAKF,MAAQ0B,EAClCjB,EAAI,EAAKT,MAAOS,GAAKmB,EAAUnB,GAAK,EAAKT,MAAO,CACvD,IAAMY,EAAOc,EAAIjB,EACjB,GAAI,EAAKb,MAAMgB,KAAUe,EAAO,MAChC,GAAIf,IAASgB,EAAU,OAAOD,GAGlC,OAAOvC,EAASW,SArFmC,KAwF7CwB,QAAU,WAGhB,IAFA,IAAMI,EAAQ,EAAK/B,MAAM,GACnBM,EAAa,EAAKE,gBACfK,EAAI,EAAKT,MAAQ,EAAGS,EAAIP,EAAYO,GAAK,EAAKT,MAAQ,EAC7D,GAAI,EAAKJ,MAAMa,KAAOkB,EAAO,OAAOvC,EAASW,QAE/C,OAAO4B,GA9F4C,KAiG7CH,QAAU,WAIhB,IAHA,IAAMK,EAAQ,EAAK7B,MAAQ,EACrB2B,EAAQ,EAAK/B,MAAMiC,GACnB3B,EAAa,EAAKE,gBACfK,EAAI,EAAIoB,EAAOpB,GAAKP,EAAa,EAAKF,MAAOS,GAAKoB,EACzD,GAAI,EAAKjC,MAAMa,KAAOkB,EAAO,OAAOvC,EAASW,QAE/C,OAAO4B,GAvGPxB,KAAKR,WAAaA,EACdC,GACFO,KAAKP,MAAQA,EACbO,KAAKW,oBAELX,KAAKP,MAAQ,IAAIkC,MAAgB3B,KAAKC,iBAAiB2B,KAAK3C,EAASW,U,QCbrEiC,GAAU,mBACb5C,EAASW,QAAU,iBADN,cAEbX,EAASI,OAAS,cAFL,cAGbJ,EAASK,MAAQ,gBAHJ,GAsBDwC,EAX8B,SAAC,GAA+B,IAA7B1C,EAA4B,EAA5BA,MAAO2C,EAAqB,EAArBA,QACrD,OACE,4BACEA,QAASA,EACTC,UAAS,qGAAgGH,EAAWzC,KAEnHA,EAASA,IAAUH,EAASK,MAAQ,IAAM,IAAO,OCJzC2C,EAR+B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAO1B,EAAV,EAAUA,SAAV,OAC5C,yBAAKwB,UAAU,kHACZE,EAAMzC,MAAM0C,KAAI,SAACC,EAAO9B,GAAR,OACf,kBAAC,EAAD,CAAMlB,MAAOgD,EAAOC,IAAK/B,EAAGyB,QAAS,kBAAMvB,EAASF,W,QCR7CgC,EAAiB,uCAAG,WAAOJ,GAAP,6BAAAK,EAAA,sDAC/BC,QAAQC,KAAK,YACPC,EAAoBR,EACvBhC,UACAiC,KAAI,SAACQ,GAAD,MAAU,CAACT,EAAM1C,WAAaoD,EAAcV,EAAM1B,SAASmC,IAAQA,MAEtEE,GAAeC,IACfC,EAAsB,GAPK,cAQZL,GARY,4DAQpBC,EARoB,WASvBK,EAAUL,EAAK,IACPE,GAVe,wBAW3BE,EAAY,CAACJ,EAAK,IAClBE,EAAcG,EAZa,mCAezBA,IAAYH,EAfa,wBAgB3BE,EAAUxC,KAAKoC,EAAK,IAhBO,8KAoB/BH,QAAQS,IAAIP,GACNQ,EAAcC,KAAKC,MAAMD,KAAKE,SAAWN,EAAUjC,QACzD0B,QAAQc,QAAQ,YAtBe,kBAuBxBP,EAAUG,IAvBc,gEAAH,sDA8BxBN,EAAgB,SAAhBA,EAAiBV,GACrB,GAAIA,EAAMxC,KACR,OAAOwC,EAAMvC,OAEf,IAJqD,EAIjD4D,EAAOrB,EAAM/C,cAJoC,cAKlC+C,EAAMhC,WAL4B,IAKrD,2BAAoC,CAAC,IAA1ByC,EAAyB,QAC5Ba,EAAmBZ,EAAcV,EAAM1B,SAASmC,IAClDa,EAAmBtB,EAAM1C,WAAa+D,EAAOrB,EAAM1C,aACrD+D,EAAOC,IAR0C,8BAWrD,OAAOD,G,QCjCIE,EAA4C,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,WAAYC,EAAwC,EAAxCA,WAAYC,EAA4B,EAA5BA,eAClF,OACE,yBAAK5B,UAAU,wFACb,wBAAIA,UAAU,mCAAd,wBACA,wBAAIA,UAAU,4CACd,wBAAIA,UAAS,yBAAoB0B,EAAWlE,aAAeqE,EAAS,iBAAmB,iBACpFH,EAAWlE,aAAeqE,EAAS,OAAS,MAD/C,SAIA,wBAAI7B,UAAU,4CACd,8BACE,kBAAC8B,EAAA,EAAD,CACEC,QAASJ,EACTK,SAAU,SAACC,GAAD,OAAgDL,EAAeK,EAAMC,OAAOH,YAH1F,iBCNSI,EAVyC,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACtD,yBAAKpC,UAAU,uBACb,0BAAMA,UAAU,kBACd,uBAAGA,UAAU,+GACVoC,MCDIC,EAA2C,SAAC,GAA8B,IAA5BD,EAA2B,EAA3BA,QAA2B,EAAlBE,KAG9D,OAAO,kBAAC,EAAD,CAAiBF,QAASA,M,SPR3BlF,O,sBAAAA,M,KAQL,IAAMqF,EAAkBC,IAAMC,cAA+B,CAAEC,aAAa,WAAD,4BAAE,sBAAAnC,EAAA,oFAAYoC,GAAZ,2CAAF,kDAAC,KAW7EC,EAAc,CAAEN,KAAMpF,EAAc2F,QAASC,MAAM,EAAOV,QAAS,IAE5DW,EAAkD,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAsB,EAC5DC,mBAAwBL,GADoC,mBAC/ExF,EAD+E,KACxE8F,EADwE,KAGhFR,EAAY,uCAAG,WAAON,GAAP,6BAAA7B,EAAA,6DAAwB+B,EAAxB,+BAA+BpF,EAAc2F,QAASM,EAAtD,+BAA+D,IAA/D,kBACZ,IAAIC,SAAQ,SAACC,GAClBH,EAAS,CAAEd,UAASE,OAAMQ,MAAM,IAChCQ,YAAW,WACTC,IACAF,MACCF,OANc,2CAAH,sDAUZI,EAAgB,WACpBL,EAASN,IAGX,OACE,kBAACL,EAAgBiB,SAAjB,CAA0BpD,MAAO,CAAEsC,iBAChCM,EACA5F,EAAM0F,KAAO,kBAAC,EAAD,CAAUV,QAAShF,EAAMgF,QAASE,KAAMlF,EAAMkF,OAAW,OQjChET,EAAS5E,EAASK,MAkEhBmG,EAhEuB,WAAO,IAAD,EACNR,mBAAkBpB,GADZ,mBACnC6B,EADmC,KACrBC,EADqB,OAEXV,mBAAqB,IAAI1F,EAAWmG,IAFzB,mBAEnChC,EAFmC,KAEvBkC,EAFuB,OAGZX,oBAAS,GAHG,mBAGnCY,EAHmC,KAG1BC,EAH0B,KAIlCpB,EAAiBqB,qBAAWxB,GAA5BG,aAEFsB,EAAUC,uBAAY,WAC1BL,EAAS,IAAIrG,EAAWmG,IACxBC,EAAYxG,EAAYuG,MACvB,CAACA,IAEEQ,EAAWD,uBAAY,WAC3BvB,EAAa,cAAD,OAAehB,EAAW/D,OAAS,UAAY,OAA/C,MACZ2F,WAAWU,EAAS,OACnB,CAACtC,EAAW/D,OAAQ+E,EAAcsB,IAE/BxF,EAAWyF,uBACf,SAACxF,GACCmF,EAASlC,EAAWlD,SAASC,MAE/B,CAACiD,IAGGyC,EAAUF,sBAAW,sBAAC,4BAAA1D,EAAA,sEACAD,EAAkBoB,GADlB,OACpB0C,EADoB,OAG1Bd,YACE,WACE9E,EAAS4F,KAEXP,EAlCgB,IAkCU,GAPF,2CASzB,CAACnC,EAAYmC,EAASrF,IAEzB6F,qBAAU,WAEJ3C,EAAWhE,KACbwG,IAGExC,EAAWlE,aAAeL,EAAY0E,IAExCsC,MAED,CAACzC,EAAYyC,EAASD,IAYzB,OACE,yBAAKlE,UAAU,+DACb,kBAAC,EAAD,CAAOE,MAAOwB,EAAYlD,SAZP,SAACC,GAClBiD,EAAWlE,aAAeqE,GACxBH,EAAWjE,MAAMgB,KAAUxB,EAASW,SAASY,EAASC,MAW1D,kBAAC,EAAD,CAAWiD,WAAYA,EAAYE,eAPhB,SAAC0C,GACtBR,EAAWQ,IAM0D3C,WAAYkC,MCxDtEU,EAXsB,WACnC,OACE,kBAAC,EAAD,KACE,yBAAKvE,UAAU,2CACb,kBAAC,IAAD,CAAcwE,KAAK,mDAAmDC,UAAU,UAAUC,YAAY,SACtG,kBAAC,EAAD,SCEFC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DA0CnC,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBtI,QACfgI,UAAUC,cAAcQ,YAI1BrF,QAAQS,IACN,iHAKEkE,GAAUA,EAAOW,UACnBX,EAAOW,SAASN,KAMlBhF,QAAQS,IAAI,sCAGRkE,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUP,WAO5BQ,OAAM,SAACC,GACNzF,QAAQyF,MAAM,4CAA6CA,MC7FjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDenB,SAAkBnB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAImB,IAAIC,wBAAwB3B,OAAOC,SAASN,MACpDiC,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,QAAQ,WAC9B,IAAMxB,EAAK,UAAMsB,wBAAN,sBAEP7B,IAgEV,SAAiCO,EAAeC,GAE9CwB,MAAMzB,EAAO,CACX0B,QAAS,CAAE,iBAAkB,YAE5BrB,MAAK,SAACsB,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBACjB,MAApBF,EAASG,QAAkC,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAEzE7B,UAAUC,cAAc6B,MAAM3B,MAAK,SAACC,GAClCA,EAAa2B,aAAa5B,MAAK,WAC7BV,OAAOC,SAASsC,eAKpBnC,EAAgBC,EAAOC,MAG1Ba,OAAM,WACLxF,QAAQS,IAAI,oEAnFVoG,CAAwBnC,EAAOC,GAI/BC,UAAUC,cAAc6B,MAAM3B,MAAK,WACjC/E,QAAQS,IACN,iHAMJgE,EAAgBC,EAAOC,OCxC/BE,K","file":"static/js/main.578cd3b2.chunk.js","sourcesContent":["export enum Outcomes {\n  Cross = 1,\n  Circle = -1,\n  Neutral = 0,\n}\n\nexport type Players = Outcomes.Circle | Outcomes.Cross;\n\nexport const otherPlayer = (state: Outcomes) => (state === Outcomes.Circle ? Outcomes.Cross : Outcomes.Circle);\n","import React, { useState } from 'react';\nimport { Snackbar } from './Snackbars';\n\nexport enum SnackbarTypes {\n  Default,\n}\n\nexport interface SnackbarHandler {\n  openSnackbar: (message: string, type?: SnackbarTypes, millis?: number) => Promise<void>;\n}\n\nexport const SnackbarContext = React.createContext<SnackbarHandler>({ openSnackbar: async () => undefined });\n\ninterface Props {\n  children?: React.ReactNode;\n}\n\ninterface SnackbarState {\n  type: SnackbarTypes;\n  open: boolean;\n  message: string;\n}\nconst closedState = { type: SnackbarTypes.Default, open: false, message: '' };\n\nexport const SnackbarWrapper: React.FunctionComponent<Props> = ({ children }: Props) => {\n  const [state, setState] = useState<SnackbarState>(closedState);\n\n  const openSnackbar = async (message: string, type = SnackbarTypes.Default, millis = 6000): Promise<void> => {\n    return new Promise((resolve) => {\n      setState({ message, type, open: true });\n      setTimeout(() => {\n        closeSnackbar();\n        resolve();\n      }, millis);\n    });\n  };\n\n  const closeSnackbar = () => {\n    setState(closedState);\n  };\n\n  return (\n    <SnackbarContext.Provider value={{ openSnackbar }}>\n      {children}\n      {state.open ? <Snackbar message={state.message} type={state.type} /> : null}\n    </SnackbarContext.Provider>\n  );\n};\n","import { Outcomes, Players, otherPlayer } from './outcomes';\nexport class BoardState {\n  tiles: Outcomes[];\n  playerTurn: Players;\n  done = false;\n  winner: Outcomes = Outcomes.Neutral;\n  readonly width: number = 3;\n  readonly heigth: number = 3;\n  private readonly totalTiles = this.width * this.heigth;\n\n  constructor(playerTurn: Players, tiles?: Outcomes[]) {\n    this.playerTurn = playerTurn;\n    if (tiles) {\n      this.tiles = tiles;\n      this.checkForGameOver();\n    } else {\n      this.tiles = new Array<Outcomes>(this.getTotalTiles()).fill(Outcomes.Neutral);\n    }\n  }\n\n  getTotalTiles = () => this.totalTiles;\n\n  okMoves = () => {\n    const moves: number[] = [];\n    this.tiles.forEach((v, i) => {\n      if (v === Outcomes.Neutral) {\n        moves.push(i);\n      }\n    });\n    return moves;\n  };\n\n  makeMove = (tile: number) => {\n    const newTiles = [...this.tiles];\n    newTiles[tile] = this.playerTurn;\n    return new BoardState(this.otherPlayer(), newTiles);\n  };\n\n  otherPlayer = () => otherPlayer(this.playerTurn);\n\n  private checkForGameOver = () => {\n    if ((this.winner = this.wonGame())) {\n      this.done = true;\n    } else {\n      this.done = this.full();\n    }\n  };\n\n  private full = () => this.okMoves().length === 0;\n\n  private wonGame = (): Outcomes => {\n    const rWin = this.rowWin();\n    if (rWin) return rWin;\n\n    const cWin = this.colWin();\n    if (cWin) return cWin;\n\n    const d1Win = this.dia1Win();\n    if (d1Win) return d1Win;\n\n    return this.dia2Win();\n  };\n\n  // Did wanted generator fucntions here but also wanted to keep the arrow function syntax\n  // https://stackoverflow.com/questions/27661306/can-i-use-es6s-arrow-function-syntax-with-generators-arrow-notation\n  private rowWin = (): Outcomes => {\n    const totalTiles = this.getTotalTiles();\n    const lastRowStartTile = totalTiles - this.width;\n    for (let y = 0; y <= lastRowStartTile; y += this.width) {\n      const first = this.tiles[y];\n      if (first === Outcomes.Neutral) continue;\n      const lastTile = y + this.width - 1;\n      for (let i = 0; i <= lastTile; i++) {\n        const tile = y + i;\n        if (this.tiles[tile] !== first) break;\n        if (tile === lastTile) return first;\n      }\n    }\n    return Outcomes.Neutral;\n  };\n\n  private colWin = (): Outcomes => {\n    const totalTiles = this.getTotalTiles();\n    // Iterates over every column\n    for (let y = 0; y < this.width; y++) {\n      const first = this.tiles[y];\n      if (first === Outcomes.Neutral) continue;\n      // Iterates over every tile in column y\n      const lastTile = totalTiles - this.width + y;\n      for (let i = this.width; i <= lastTile; i += this.width) {\n        const tile = y + i;\n        if (this.tiles[tile] !== first) break;\n        if (tile === lastTile) return first;\n      }\n    }\n    return Outcomes.Neutral;\n  };\n\n  private dia1Win = () => {\n    const first = this.tiles[0];\n    const totalTiles = this.getTotalTiles();\n    for (let i = this.width + 1; i < totalTiles; i += this.width + 1) {\n      if (this.tiles[i] !== first) return Outcomes.Neutral;\n    }\n    return first;\n  };\n\n  private dia2Win = () => {\n    const steps = this.width - 1;\n    const first = this.tiles[steps];\n    const totalTiles = this.getTotalTiles();\n    for (let i = 2 * steps; i <= totalTiles - this.width; i += steps) {\n      if (this.tiles[i] !== first) return Outcomes.Neutral;\n    }\n    return first;\n  };\n}\n","import { Outcomes } from '../../logic/outcomes';\nimport React from 'react';\n\nconst tileColors = {\n  [Outcomes.Neutral]: 'bg-soft-white',\n  [Outcomes.Circle]: 'bg-red-800',\n  [Outcomes.Cross]: 'bg-green-700',\n};\n\ninterface Props {\n  state: Outcomes;\n  onClick: () => void;\n}\n\nconst Tile: React.FunctionComponent<Props> = ({ state, onClick }: Props) => {\n  return (\n    <button\n      onClick={onClick}\n      className={`border-8 focus:outline-none font-bold text-4xl md:text-6xl border-prussian-blue text-white ${tileColors[state]}`}\n    >\n      {state ? (state === Outcomes.Cross ? 'X' : 'O') : null}\n    </button>\n  );\n};\n\nexport default Tile;\n","import React from 'react';\nimport { BoardState } from '../../logic/board';\nimport Tile from './Tile';\n\ninterface Props {\n  board: BoardState;\n  makeMove: (tile: number) => void;\n}\nconst Board: React.FunctionComponent<Props> = ({ board, makeMove }: Props) => (\n  <div className=\"grid grid-rows-3 grid-cols-3 bg- w-bvw0 h-bvw0 md:w-bvw1 md:h-bvw1 border-4 border-prussian-blue bg-soft-white\">\n    {board.tiles.map((value, i) => (\n      <Tile state={value} key={i} onClick={() => makeMove(i)} />\n    ))}\n  </div>\n);\n\nexport default Board;\n","import { BoardState } from './board';\nimport { Outcomes } from './outcomes';\n\nexport const calculateBestMove = async (board: BoardState): Promise<number> => {\n  console.time('BestMove');\n  const movesWithOutcomes = board\n    .okMoves()\n    .map((move) => [board.playerTurn * minMaxOutcome(board.makeMove(move)), move]);\n\n  let currentBest = -Infinity;\n  let bestMoves: number[] = [];\n  for (const move of movesWithOutcomes) {\n    const outcome = move[0];\n    if (outcome > currentBest) {\n      bestMoves = [move[1]];\n      currentBest = outcome;\n      continue;\n    }\n    if (outcome === currentBest) {\n      bestMoves.push(move[1]);\n      continue;\n    }\n  }\n  console.log(movesWithOutcomes);\n  const randomIndex = Math.floor(Math.random() * bestMoves.length);\n  console.timeEnd('BestMove');\n  return bestMoves[randomIndex];\n};\n// const minMaxOutcome = (board: BoardState): Outcomes =>\n//   board.done\n//     ? board.winner\n//     : Math.max(...board.okMoves().map((move) => board.playerTurn * minMaxOutcome(board.makeMove(move))));\n\nconst minMaxOutcome = (board: BoardState): Outcomes => {\n  if (board.done) {\n    return board.winner;\n  }\n  let best = board.otherPlayer();\n  for (const move of board.okMoves()) {\n    const potentialOutcome = minMaxOutcome(board.makeMove(move));\n    if (potentialOutcome * board.playerTurn > best * board.playerTurn) {\n      best = potentialOutcome;\n    }\n  }\n  return best;\n};\n","import { Switch } from '@material-ui/core';\nimport React from 'react';\nimport { BoardState } from '../../logic/board';\nimport { Player } from './Game';\n\ninterface Props {\n  boardState: BoardState;\n  switchBotDelay: (delay: boolean) => void;\n  botDelayOn: boolean;\n}\n\nexport const GameStats: React.FunctionComponent<Props> = ({ boardState, botDelayOn, switchBotDelay }: Props) => {\n  return (\n    <div className=\"flex flex-col p-4 items-center bg-honeydew shadow rounded m-2 w-full max-w-md border\">\n      <h1 className=\"text-3xl text-center font-light\">Unbeatable TicTacToe</h1>\n      <hr className=\"border-t w-4/5 my-1 border-celadon-blue\" />\n      <h3 className={`font-extrabold ${boardState.playerTurn === Player ? 'text-green-700' : 'text-red-800'}`}>\n        {boardState.playerTurn === Player ? 'Your' : 'Bot'} turn\n      </h3>\n\n      <hr className=\"border-t w-4/5 my-1 border-celadon-blue\" />\n      <span>\n        <Switch\n          checked={botDelayOn}\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => switchBotDelay(event.target.checked)}\n        />\n        Bot Delayed\n      </span>\n    </div>\n  );\n};\n","import React from 'react';\n\ninterface Props {\n  message: string;\n}\nconst DefaultSnackbar: React.FunctionComponent<Props> = ({ message }: Props) => (\n  <div className=\"flex justify-center\">\n    <span className=\"fixed bottom-0\">\n      <p className=\"text-center p-3 px-6 m-4 rounded-full text-lg font-semibold shadow bg-imperial-red text-honeydew opacity-75\">\n        {message}\n      </p>\n    </span>\n  </div>\n);\n\nexport default DefaultSnackbar;\n","import React from 'react';\nimport DefaultSnackbar from './DefaultSnackbar';\nimport { SnackbarTypes } from './SnackbarWrapper';\n\ninterface Props {\n  message: string;\n  type: SnackbarTypes;\n}\nexport const Snackbar: React.FunctionComponent<Props> = ({ message, type }: Props) => {\n  switch (type) {\n    default:\n      return <DefaultSnackbar message={message} />;\n  }\n};\n","import { useCallback, useContext, useEffect, useState } from 'react';\nimport { BoardState } from '../../logic/board';\nimport React from 'react';\nimport Board from './Board';\nimport { Outcomes, Players, otherPlayer } from '../../logic/outcomes';\nimport { calculateBestMove } from '../../logic/bot';\nimport { GameStats } from './GameStats';\nimport { SnackbarContext } from '../snackbars/SnackbarWrapper';\n\nconst standardDelay = 700;\n\nexport const Player = Outcomes.Cross;\n\nconst Game: React.FunctionComponent = () => {\n  const [startingNext, setStarting] = useState<Players>(Player);\n  const [boardState, setBoard] = useState<BoardState>(new BoardState(startingNext));\n  const [delayOn, setDelayOn] = useState(true);\n  const { openSnackbar } = useContext(SnackbarContext);\n\n  const restart = useCallback(() => {\n    setBoard(new BoardState(startingNext));\n    setStarting(otherPlayer(startingNext));\n  }, [startingNext]);\n\n  const gameOver = useCallback(() => {\n    openSnackbar(`Game Over. ${boardState.winner ? 'Bot Won' : 'Draw'}!`);\n    setTimeout(restart, 1000);\n  }, [boardState.winner, openSnackbar, restart]);\n\n  const makeMove = useCallback(\n    (tile: number) => {\n      setBoard(boardState.makeMove(tile));\n    },\n    [boardState],\n  );\n\n  const botTurn = useCallback(async () => {\n    const optimalMove = await calculateBestMove(boardState);\n    // Delay for dramatic effect\n    setTimeout(\n      () => {\n        makeMove(optimalMove);\n      },\n      delayOn ? standardDelay : 0,\n    );\n  }, [boardState, delayOn, makeMove]);\n\n  useEffect(() => {\n    // Check for game over\n    if (boardState.done) {\n      gameOver();\n      return;\n    }\n    if (boardState.playerTurn === otherPlayer(Player)) {\n      // Bots turn\n      botTurn();\n    }\n  }, [boardState, botTurn, gameOver]);\n\n  const playerMakeMove = (tile: number) => {\n    if (boardState.playerTurn === Player) {\n      if (boardState.tiles[tile] === Outcomes.Neutral) makeMove(tile);\n    }\n  };\n\n  const switchBotDelay = (delay: boolean) => {\n    setDelayOn(delay);\n  };\n\n  return (\n    <div className=\"flex w-full flex-wrap justify-center items-center flex-grow\">\n      <Board board={boardState} makeMove={playerMakeMove} />\n      <GameStats boardState={boardState} switchBotDelay={switchBotDelay} botDelayOn={delayOn} />\n    </div>\n  );\n};\n\nexport default Game;\n","import React from 'react';\nimport GithubCorner from 'react-github-corner';\nimport '../tailwind.output.css';\nimport Game from './game/Game';\nimport { SnackbarWrapper } from './snackbars/SnackbarWrapper';\nconst App: React.FunctionComponent = () => {\n  return (\n    <SnackbarWrapper>\n      <div className=\"bg-dark-blue flex flex-col min-h-screen\">\n        <GithubCorner href=\"https://github.com/albinjal/unbeatable-tictactoe\" octoColor=\"#21252b\" bannerColor=\"#fff\" />\n        <Game />\n      </div>\n    </SnackbarWrapper>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}