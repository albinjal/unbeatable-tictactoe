{"version":3,"sources":["logic/tile-state.ts","logic/board.ts","components/tile.tsx","logic/bot.ts","components/game.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TileState","BoardState","playerTurn","tiles","width","heigth","calcTotalTiles","minMaxOutcome","won","wonGame","okMoves","length","Empty","best","otherPlayer","move","potentialOutcome","makeMove","moves","forEach","v","i","push","tile","newTiles","Circle","Cross","rWin","rowWin","cWin","colWin","d1Win","dia1Win","dia2Win","lastRowStartTile","y","first","lastTile","totalTiles","steps","this","Array","fill","Tile","props","status","onClick","className","toString","mark","state","bestMove","board","console","time","outcome","log","timeEnd","botStart","bot","Game","useState","boardState","setBoard","gameOverCheck","setTimeout","alert","restart","newBoard","map","playerMove","botMove","key","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.564b1a59.chunk.js","sourcesContent":["export enum TileState {\n  Cross = 1,\n  Circle = -1,\n  Empty = 0,\n}\n\nexport type Players = TileState.Circle | TileState.Cross;\n","import { TileState, Players } from './tile-state';\n\nexport class BoardState {\n  tiles: TileState[];\n  playerTurn: Players;\n  readonly width: number = 3;\n  readonly heigth: number = 3;\n\n  constructor(playerTurn: Players, tiles?: TileState[]) {\n    this.playerTurn = playerTurn;\n    if (tiles) {\n      this.tiles = tiles;\n    } else {\n      this.tiles = new Array<TileState>(this.calcTotalTiles()).fill(\n        TileState.Empty\n      );\n    }\n  }\n\n  calcTotalTiles = () => this.width * this.heigth;\n\n  minMaxOutcome = (): TileState => {\n    const won = this.wonGame();\n    if (won) {\n      return won;\n    }\n    if (this.okMoves().length === 0) {\n      return TileState.Empty;\n    }\n    let best = this.otherPlayer();\n    for (const move of this.okMoves()) {\n      const potentialOutcome = this.makeMove(move).minMaxOutcome();\n      if (potentialOutcome * this.playerTurn > best * this.playerTurn) {\n        best = potentialOutcome;\n      }\n    }\n    return best;\n  };\n\n  okMoves = () => {\n    let moves: number[] = [];\n    this.tiles.forEach((v, i) => {\n      if (v === TileState.Empty) {\n        moves.push(i);\n      }\n    });\n    return moves;\n  };\n\n  makeMove = (tile: number) => {\n    let newTiles = [...this.tiles];\n    newTiles[tile] = this.playerTurn;\n    return new BoardState(this.otherPlayer(), newTiles);\n  };\n\n  otherPlayer = () =>\n    this.playerTurn === TileState.Circle ? TileState.Cross : TileState.Circle;\n\n  wonGame = (): TileState => {\n    const rWin = this.rowWin();\n    if (rWin) return rWin;\n\n    const cWin = this.colWin();\n    if (cWin) return cWin;\n\n    const d1Win = this.dia1Win();\n    if (d1Win) return d1Win;\n\n    return this.dia2Win();\n  };\n\n  // Did not want these methods static but did not want to mess with this outside arrow functions\n  // https://stackoverflow.com/questions/27661306/can-i-use-es6s-arrow-function-syntax-with-generators-arrow-notation\n  private rowWin = (): TileState => {\n    const totalTiles = this.calcTotalTiles();\n    const lastRowStartTile = totalTiles - this.width;\n    for (let y = 0; y <= lastRowStartTile; y += this.width) {\n      const first = this.tiles[y];\n      if (first === TileState.Empty) continue;\n      const lastTile = y + this.width - 1;\n      for (let i = 0; i <= lastTile; i++) {\n        const tile = y + i;\n        if (this.tiles[tile] !== first) break;\n        if (tile === lastTile) return first;\n      }\n    }\n    return TileState.Empty;\n  };\n\n  private colWin = (): TileState => {\n    const totalTiles = this.calcTotalTiles();\n    // Iterates over every column\n    for (let y = 0; y < this.width; y++) {\n      const first = this.tiles[y];\n      if (first === TileState.Empty) continue;\n      // Iterates over every tile in column y\n      const lastTile = totalTiles - this.width + y;\n      for (let i = this.width; i <= lastTile; i += this.width) {\n        const tile = y + i;\n        if (this.tiles[tile] !== first) break;\n        if (tile === lastTile) return first;\n      }\n    }\n    return TileState.Empty;\n  };\n\n  private dia1Win = () => {\n    const first = this.tiles[0];\n    const totalTiles = this.calcTotalTiles();\n    for (let i = this.width + 1; i < totalTiles; i += this.width + 1) {\n      if (this.tiles[i] !== first) return TileState.Empty;\n    }\n    return first;\n  };\n\n  private dia2Win = () => {\n    const steps = this.width - 1;\n    const first = this.tiles[steps];\n    const totalTiles = this.calcTotalTiles();\n    for (let i = 2 * steps; i <= totalTiles - this.width; i += steps) {\n      if (this.tiles[i] !== first) return TileState.Empty;\n    }\n    return first;\n  };\n}\n","import React, { FunctionComponent } from 'react';\nimport { TileState } from '../logic/tile-state';\ninterface TileProps {\n  status: TileState;\n  onClick: () => void;\n}\n\nexport const Tile: FunctionComponent<TileProps> = (props: TileProps) => {\n  const { status, onClick } = props;\n  return (\n    <div onClick={onClick} className={`tile status-${status.toString()}`}>\n      {mark(status)}\n    </div>\n  );\n};\n\nconst mark = (state: TileState): string => {\n  switch (state) {\n    case TileState.Cross:\n      return 'X';\n    case TileState.Circle:\n      return 'O';\n    default:\n      return '';\n  }\n};\n","import { BoardState } from './board';\n\nexport const bestMove = (board: BoardState): number => {\n  console.time('BestMove');\n  const okMoves = board.okMoves();\n  let best = board.otherPlayer();\n  let bestMove = okMoves[0];\n  okMoves.forEach((move) => {\n    const outcome = board.makeMove(move).minMaxOutcome();\n    if (outcome * board.playerTurn > best * board.playerTurn) {\n      best = outcome;\n      bestMove = move;\n    }\n  });\n  console.log('worstcase: ', best);\n  console.timeEnd('BestMove');\n  return bestMove;\n};\n","import React, { FunctionComponent, useState } from 'react';\nimport { BoardState } from '../logic/board';\nimport { TileState } from '../logic/tile-state';\nimport { Tile } from './tile';\nimport { bestMove } from '../logic/bot';\nconst botDelay = 300;\nlet botStart = false;\nconst bot = TileState.Cross;\nexport const Game: FunctionComponent = () => {\n  const [boardState, setBoard] = useState(new BoardState(TileState.Circle));\n  const gameOverCheck = (board: BoardState) => {\n    const won = board.wonGame();\n    if (won) {\n      setTimeout(() => {\n        alert(won === TileState.Circle ? 'You Won!' : 'Computer Won!');\n        restart();\n      });\n      return false;\n    }\n    if (board.okMoves().length === 0) {\n      setTimeout(() => {\n        alert('Draw!');\n        restart();\n      });\n      return false;\n    }\n    return true;\n  };\n\n  const restart = () => {\n    let newBoard = new BoardState(botStart ? bot * -1 : bot);\n    if (!botStart) {\n      setTimeout(\n        () => setBoard(newBoard.makeMove(bestMove(newBoard))),\n        botDelay\n      );\n    }\n    setBoard(newBoard);\n    botStart = !botStart;\n  };\n  return (\n    <div className='wrapper'>\n      <h1>Unbeatable Tic Tac Toe</h1>\n      <div className='board'>\n        {boardState.tiles.map((tile, i) => (\n          <Tile\n            status={tile}\n            onClick={() => {\n              if (\n                boardState.tiles[i] === TileState.Empty &&\n                boardState.playerTurn !== bot\n              ) {\n                const playerMove = boardState.makeMove(i);\n                setBoard(playerMove);\n                if (gameOverCheck(playerMove)) {\n                  const botMove = playerMove.makeMove(bestMove(playerMove));\n                  setTimeout(() => {\n                    setBoard(botMove);\n                    gameOverCheck(botMove);\n                  }, botDelay);\n                }\n              }\n            }}\n            key={i}\n          ></Tile>\n        ))}\n      </div>\n      <span className='turn'>\n        <h3>\n          {boardState.playerTurn === TileState.Circle ? 'Your ' : 'Computers '}\n          Turn\n        </h3>\n      </span>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Game } from './components/game';\nfunction App() {\n  return <Game></Game>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}